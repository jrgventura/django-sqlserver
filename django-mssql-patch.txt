diff --git a/sqlserver_ado/operations.py b/sqlserver_ado/operations.py
index c9705f1..715da42 100644
--- a/sqlserver_ado/operations.py
+++ b/sqlserver_ado/operations.py
@@ -133,6 +133,16 @@ class DatabaseOperations(BaseDatabaseOperations):
         )
         return sql, []
 
+    def datetime_cast_date_sql(self, field_name, tzname):
+        """
+        Returns the SQL necessary to cast a datetime value to date value.
+        """
+        field_name = self._switch_tz_offset_sql(field_name, tzname)
+        sql = "CAST({field_name} AS DATE)".format(
+            field_name=field_name,
+        )
+        return sql, []
+
     def get_db_converters(self, expression):
         converters = super(DatabaseOperations, self).get_db_converters(expression)
         internal_type = expression.output_field.get_internal_type()
@@ -378,6 +388,16 @@ class DatabaseOperations(BaseDatabaseOperations):
                 raise ValueError("SQL Server backend does not support timezone-aware times.")
         return value.isoformat()
 
+    if django.VERSION >= (1, 9, 0):
+        def value_to_db_date(self, value):
+            """
+            Transforms a date value to an object compatible with what is expected
+            by the backend driver for date columns.
+            """
+            if value is None:
+                return None
+            return six.text_type(value)
+
     def value_to_db_decimal(self, value, max_digits, decimal_places):
         if value is None or value == '':
             return None
@@ -408,7 +428,7 @@ class DatabaseOperations(BaseDatabaseOperations):
             tz = timezone.get_current_timezone()
             first = timezone.make_aware(first, tz)
             second = timezone.make_aware(second, tz)
-        return [self.value_to_db_datetime(first), self.value_to_db_datetime(second)]
+        return [self.value_to_db_date(first), self.value_to_db_date(second)]
 
     def convert_values(self, value, field):
         """
diff --git a/sqlserver_ado/schema.py b/sqlserver_ado/schema.py
index 12bdb52..371c7cd 100644
--- a/sqlserver_ado/schema.py
+++ b/sqlserver_ado/schema.py
@@ -11,6 +11,7 @@ from django.utils.six.moves import reduce
 from django.utils.text import force_text
 
 from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+import django
 
 logger = getLogger('django.db.backends.schema')
 
@@ -24,6 +25,15 @@ def _related_non_m2m_objects(old_field, new_field):
     )
 
 
+if django.VERSION >= (1, 9, 0):
+    def _remote_field(fld):
+        return fld.remote_field
+else:
+    def _remote_field(fld):
+        return fld.rel
+
+
+
 class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
     sql_rename_table = "sp_rename '%(old_table)s', '%(new_table)s'"
     sql_delete_table = "DROP TABLE %(table)s"
@@ -124,8 +134,8 @@ END'''
         but for M2Ms may involve deleting a table.
         """
         # Special-case implicit M2M tables
-        if isinstance(field, ManyToManyField) and field.rel.through._meta.auto_created:
-            return self.delete_model(field.rel.through)
+        if isinstance(field, ManyToManyField) and _remote_field(field).through._meta.auto_created:
+            return self.delete_model(_remote_field(field).through)
         # It might not actually have a column behind it
         if field.db_parameters(connection=self.connection)['type'] is None:
             return
@@ -160,7 +170,7 @@ END'''
 
         # Drop any FK constraints, we'll remake them later
         fks_dropped = set()
-        if old_field.rel and old_field.db_constraint:
+        if _remote_field(old_field) and old_field.db_constraint:
             fk_names = self._constraint_names(model, [old_field.column], foreign_key=True)
             if strict and len(fk_names) != 1:
                 raise ValueError("Found wrong number (%s) of foreign key constraints for %s.%s" % (
@@ -387,8 +397,8 @@ END'''
             for sql, params in other_actions:
                 self.execute(sql, params)
         # Does it have a foreign key?
-        if (new_field.rel and
-                (fks_dropped or not old_field.rel or not old_field.db_constraint) and
+        if (_remote_field(new_field) and
+                (fks_dropped or not _remote_field(old_field) or not old_field.db_constraint) and
                 new_field.db_constraint):
             self.execute(self._create_fk_sql(model, new_field, "_fk_%(to_table)s_%(to_column)s"))
         # Rebuild FKs that pointed to us if we previously had to drop them
@@ -423,8 +433,8 @@ END'''
         table instead (for M2M fields)
         """
         # Special-case implicit M2M tables
-        if isinstance(field, ManyToManyField) and field.rel.through._meta.auto_created:
-            return self.create_model(field.rel.through)
+        if isinstance(field, ManyToManyField) and _remote_field(field).through._meta.auto_created:
+            return self.create_model(_remote_field(field).through)
         # Get the column's definition
         definition, params = self.column_sql(model, field, include_default=True)
         # It might not actually have a column behind it
@@ -450,7 +460,7 @@ END'''
         if field.db_index and not field.unique:
             self.deferred_sql.append(self._create_index_sql(model, [field]))
         # Add any FK constraints later
-        if field.rel and self.connection.features.supports_foreign_keys and field.db_constraint:
+        if _remote_field(field) and self.connection.features.supports_foreign_keys and field.db_constraint:
             self.deferred_sql.append(self._create_fk_sql(model, field, "_fk_%(to_table)s_%(to_column)s"))
         # Reset connection if required
         if self.connection.features.connection_persists_old_columns:
